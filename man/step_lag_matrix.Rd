% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/step_lag_matrix.R
\name{step_lag_matrix}
\alias{step_lag_matrix}
\title{Create a lagged (or lead) predictor}
\usage{
step_lag_matrix(recipe, ..., role = "lag_matrix", trained = FALSE,
  lag = 1, n_subset = 1, n_shift = 0, prefix = "lag_matrix_",
  default = NA, columns = NULL, skip = FALSE,
  id = rand_id("lag_matrix"))
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the sequence of
operations for this recipe.}

\item{...}{One or more selector functions to choose which variables are
affected by the step. See [selections()] for more details.}

\item{role}{Defaults to "predictor"}

\item{trained}{A logical to indicate if the quantities for preprocessing
have been estimated.}

\item{lag}{A vector of integers. They can be positive, negative or zero.
Each specified column will be lagged for each value in the vector.}

\item{n_subset}{subset every n_subset values}

\item{n_shift}{shift the data n_shift values}

\item{prefix}{A prefix for generated column names, default to "lag_".}

\item{default}{Passed to \code{dplyr::lag}, determines what fills empty rows
left by lagging (defaults to NA).}

\item{columns}{A character string of variable names that will
be populated (eventually) by the `terms` argument.}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by [bake.recipe()]? While all operations are baked
when [prep.recipe()] is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using `skip = TRUE` as it may affect
the computations for subsequent operations}

\item{id}{A character string that is unique to this step to identify it.}
}
\value{
An updated version of `recipe` with the
  new step added to the sequence of existing steps (if any).
}
\description{
`step_lag_matrix` creates a *specification* of a recipe step that
  will add new columns of lagged data. Lagged data will
  by default include NA values where the lag was induced.
  These can be removed with [step_naomit()], or you may
  specify an alternative filler value with the `default`
  argument.  This method is faster than [step_lag()] and allows
  for negative values.
}
\details{
The step assumes that the data are already _in the proper sequential
 order_ for lagging.
}
\examples{
data(transducer)

rec <- recipe(wl ~ .,
              data = transducer[1:1000, list(datetime, wl, baro)])

with_et <- rec \%>\%
  step_lag_matrix(baro, lag = -1:1) \%>\%
  step_naomit(everything()) \%>\% 
  prep() \%>\%
  juice()

}
\seealso{
[recipe()] [step_lag()] [prep.recipe()] [bake.recipe()]
         [step_naomit()]
}
