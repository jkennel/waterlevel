% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/step_level_shift.R
\name{step_level_shift}
\alias{step_level_shift}
\title{Gaps where there are shifts in the regression}
\usage{
step_level_shift(recipe, ..., role = "level_shift", trained = FALSE,
  time_interval = 1L, prefix = "level_shift_", default = NA,
  columns = NULL, skip = FALSE, id = rand_id("level_shift"))
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the sequence of
operations for this recipe.}

\item{...}{One or more selector functions to choose which
variables are affected by the step. See [selections()]
for more details. For the `tidy` method, these are not
currently used.}

\item{role}{Defaults to "level_shift"}

\item{trained}{A logical to indicate if the quantities for preprocessing
have been estimated.}

\item{time_interval}{the delta t (numeric)}

\item{prefix}{A prefix for generated column names, default to 
"level_shift_".}

\item{default}{Passed to \code{dplyr::lag}, determines what fills empty rows
left by lagging (defaults to NA).}

\item{columns}{A character string of variable names that will
be populated (eventually) by the \code{terms} argument.}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[=bake.recipe]{bake.recipe()}}? While all operations are baked
when \code{\link[=prep.recipe]{prep.recipe()}} is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using \code{skip = TRUE} as it may affect
the computations for subsequent operations}

\item{id}{A character string that is unique to this step to identify it.}
}
\value{
An updated version of `recipe` with the new step
 added to the sequence of existing steps (if any). For the
 `tidy` method, a tibble with columns `terms` which is
 the columns that will be affected and `holiday`.
}
\description{
`step_level_shift` creates a *specification* of a recipe step
 for creating level shifts
}
\details{
`step_level_shift` calculates the earthtide response and then
 lags (leads) the terms.
}
\examples{
data(transducer)

transducer[1000:1200, wl := NA_real_]

rec <- recipe(wl ~ .,
              data = transducer[, list(datetime, wl, baro)])

with_levels <- rec \%>\%
  step_level_shift(wl, datetime, time_interval = 120L) \%>\%
  prep() \%>\%
  juice()

}
\seealso{
[recipe()]
  [prep.recipe()] [bake.recipe()]
}
\concept{generate a set of level shifts}
\keyword{datagen}
