// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// harmonic
Rcpp::NumericMatrix harmonic(arma::vec times, arma::vec& freq);
RcppExport SEXP _waterlevel_harmonic(SEXP timesSEXP, SEXP freqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type freq(freqSEXP);
    rcpp_result_gen = Rcpp::wrap(harmonic(times, freq));
    return rcpp_result_gen;
END_RCPP
}
// check_lag
int check_lag(int n, int lag, int n_shift);
RcppExport SEXP _waterlevel_check_lag(SEXP nSEXP, SEXP lagSEXP, SEXP n_shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< int >::type n_shift(n_shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(check_lag(n, lag, n_shift));
    return rcpp_result_gen;
END_RCPP
}
// get_length
int get_length(int n, int n_subset);
RcppExport SEXP _waterlevel_get_length(SEXP nSEXP, SEXP n_subsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n_subset(n_subsetSEXP);
    rcpp_result_gen = Rcpp::wrap(get_length(n, n_subset));
    return rcpp_result_gen;
END_RCPP
}
// get_start
int get_start(int n_out, int lag, int n_subset);
RcppExport SEXP _waterlevel_get_start(SEXP n_outSEXP, SEXP lagSEXP, SEXP n_subsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_out(n_outSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< int >::type n_subset(n_subsetSEXP);
    rcpp_result_gen = Rcpp::wrap(get_start(n_out, lag, n_subset));
    return rcpp_result_gen;
END_RCPP
}
// get_end
int get_end(int n, int n_out, int lag, int n_subset);
RcppExport SEXP _waterlevel_get_end(SEXP nSEXP, SEXP n_outSEXP, SEXP lagSEXP, SEXP n_subsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n_out(n_outSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< int >::type n_subset(n_subsetSEXP);
    rcpp_result_gen = Rcpp::wrap(get_end(n, n_out, lag, n_subset));
    return rcpp_result_gen;
END_RCPP
}
// shift_subset
Rcpp::NumericVector shift_subset(Rcpp::NumericVector x, int lag, int n_subset, int n_shift);
RcppExport SEXP _waterlevel_shift_subset(SEXP xSEXP, SEXP lagSEXP, SEXP n_subsetSEXP, SEXP n_shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< int >::type n_subset(n_subsetSEXP);
    Rcpp::traits::input_parameter< int >::type n_shift(n_shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_subset(x, lag, n_subset, n_shift));
    return rcpp_result_gen;
END_RCPP
}
// lag_matrix
Rcpp::NumericMatrix lag_matrix(Rcpp::NumericVector x, Rcpp::IntegerVector lags, int n_subset, int n_shift, std::string var_name);
RcppExport SEXP _waterlevel_lag_matrix(SEXP xSEXP, SEXP lagsSEXP, SEXP n_subsetSEXP, SEXP n_shiftSEXP, SEXP var_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type lags(lagsSEXP);
    Rcpp::traits::input_parameter< int >::type n_subset(n_subsetSEXP);
    Rcpp::traits::input_parameter< int >::type n_shift(n_shiftSEXP);
    Rcpp::traits::input_parameter< std::string >::type var_name(var_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(lag_matrix(x, lags, n_subset, n_shift, var_name));
    return rcpp_result_gen;
END_RCPP
}
// distributed_lag_parallel
arma::mat distributed_lag_parallel(const arma::vec& x, const arma::mat& bl, int lag_max, int n_subset, int n_shift);
RcppExport SEXP _waterlevel_distributed_lag_parallel(SEXP xSEXP, SEXP blSEXP, SEXP lag_maxSEXP, SEXP n_subsetSEXP, SEXP n_shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type bl(blSEXP);
    Rcpp::traits::input_parameter< int >::type lag_max(lag_maxSEXP);
    Rcpp::traits::input_parameter< int >::type n_subset(n_subsetSEXP);
    Rcpp::traits::input_parameter< int >::type n_shift(n_shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(distributed_lag_parallel(x, bl, lag_max, n_subset, n_shift));
    return rcpp_result_gen;
END_RCPP
}
// det_parallel
arma::cx_vec det_parallel(arma::cx_cube& a);
RcppExport SEXP _waterlevel_det_parallel(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_cube& >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(det_parallel(a));
    return rcpp_result_gen;
END_RCPP
}
// solve_tf_parallel
arma::cx_mat solve_tf_parallel(arma::cx_cube a);
RcppExport SEXP _waterlevel_solve_tf_parallel(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_cube >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_tf_parallel(a));
    return rcpp_result_gen;
END_RCPP
}
// calc_b_vals
arma::vec calc_b_vals(int b, const arma::vec& wb);
RcppExport SEXP _waterlevel_calc_b_vals(SEXP bSEXP, SEXP wbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type wb(wbSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_b_vals(b, wb));
    return rcpp_result_gen;
END_RCPP
}
// konno_ohmachi
double konno_ohmachi(const arma::vec& b_vals, const arma::vec& ref_z, const arma::vec& f, const arma::vec& x, int i);
RcppExport SEXP _waterlevel_konno_ohmachi(SEXP b_valsSEXP, SEXP ref_zSEXP, SEXP fSEXP, SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b_vals(b_valsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ref_z(ref_zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(konno_ohmachi(b_vals, ref_z, f, x, i));
    return rcpp_result_gen;
END_RCPP
}
// konno_ohmachi_parallel
arma::vec konno_ohmachi_parallel(const arma::vec& x, const arma::vec& f, int b);
RcppExport SEXP _waterlevel_konno_ohmachi_parallel(SEXP xSEXP, SEXP fSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type f(fSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(konno_ohmachi_parallel(x, f, b));
    return rcpp_result_gen;
END_RCPP
}
// konno_ohmachi_serial
arma::vec konno_ohmachi_serial(const arma::vec& x, const arma::vec& f, int b);
RcppExport SEXP _waterlevel_konno_ohmachi_serial(SEXP xSEXP, SEXP fSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type f(fSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(konno_ohmachi_serial(x, f, b));
    return rcpp_result_gen;
END_RCPP
}
// parabolic_weights_field
arma::field<arma::vec> parabolic_weights_field(const int ntap);
RcppExport SEXP _waterlevel_parabolic_weights_field(SEXP ntapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type ntap(ntapSEXP);
    rcpp_result_gen = Rcpp::wrap(parabolic_weights_field(ntap));
    return rcpp_result_gen;
END_RCPP
}
// resample_mvfft
List resample_mvfft(const arma::cx_mat& fftz, const arma::ivec& tapers, bool verbose, const bool dbl, const int tapcap);
RcppExport SEXP _waterlevel_resample_mvfft(SEXP fftzSEXP, SEXP tapersSEXP, SEXP verboseSEXP, SEXP dblSEXP, SEXP tapcapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type fftz(fftzSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type tapers(tapersSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool >::type dbl(dblSEXP);
    Rcpp::traits::input_parameter< const int >::type tapcap(tapcapSEXP);
    rcpp_result_gen = Rcpp::wrap(resample_mvfft(fftz, tapers, verbose, dbl, tapcap));
    return rcpp_result_gen;
END_RCPP
}
// calc_psd
arma::cx_mat calc_psd(const arma::cx_mat& fftz, const arma::ivec& taper_vec, const arma::field<arma::vec>& para, const int j, const int ne2);
RcppExport SEXP _waterlevel_calc_psd(SEXP fftzSEXP, SEXP taper_vecSEXP, SEXP paraSEXP, SEXP jSEXP, SEXP ne2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type fftz(fftzSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type taper_vec(taper_vecSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const int >::type j(jSEXP);
    Rcpp::traits::input_parameter< const int >::type ne2(ne2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_psd(fftz, taper_vec, para, j, ne2));
    return rcpp_result_gen;
END_RCPP
}
// resample_fft_parallel
List resample_fft_parallel(const arma::cx_mat& fftz, const arma::ivec& tapers, bool verbose, const bool dbl, const int tapcap);
RcppExport SEXP _waterlevel_resample_fft_parallel(SEXP fftzSEXP, SEXP tapersSEXP, SEXP verboseSEXP, SEXP dblSEXP, SEXP tapcapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type fftz(fftzSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type tapers(tapersSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool >::type dbl(dblSEXP);
    Rcpp::traits::input_parameter< const int >::type tapcap(tapcapSEXP);
    rcpp_result_gen = Rcpp::wrap(resample_fft_parallel(fftz, tapers, verbose, dbl, tapcap));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_waterlevel_harmonic", (DL_FUNC) &_waterlevel_harmonic, 2},
    {"_waterlevel_check_lag", (DL_FUNC) &_waterlevel_check_lag, 3},
    {"_waterlevel_get_length", (DL_FUNC) &_waterlevel_get_length, 2},
    {"_waterlevel_get_start", (DL_FUNC) &_waterlevel_get_start, 3},
    {"_waterlevel_get_end", (DL_FUNC) &_waterlevel_get_end, 4},
    {"_waterlevel_shift_subset", (DL_FUNC) &_waterlevel_shift_subset, 4},
    {"_waterlevel_lag_matrix", (DL_FUNC) &_waterlevel_lag_matrix, 5},
    {"_waterlevel_distributed_lag_parallel", (DL_FUNC) &_waterlevel_distributed_lag_parallel, 5},
    {"_waterlevel_det_parallel", (DL_FUNC) &_waterlevel_det_parallel, 1},
    {"_waterlevel_solve_tf_parallel", (DL_FUNC) &_waterlevel_solve_tf_parallel, 1},
    {"_waterlevel_calc_b_vals", (DL_FUNC) &_waterlevel_calc_b_vals, 2},
    {"_waterlevel_konno_ohmachi", (DL_FUNC) &_waterlevel_konno_ohmachi, 5},
    {"_waterlevel_konno_ohmachi_parallel", (DL_FUNC) &_waterlevel_konno_ohmachi_parallel, 3},
    {"_waterlevel_konno_ohmachi_serial", (DL_FUNC) &_waterlevel_konno_ohmachi_serial, 3},
    {"_waterlevel_parabolic_weights_field", (DL_FUNC) &_waterlevel_parabolic_weights_field, 1},
    {"_waterlevel_resample_mvfft", (DL_FUNC) &_waterlevel_resample_mvfft, 5},
    {"_waterlevel_calc_psd", (DL_FUNC) &_waterlevel_calc_psd, 5},
    {"_waterlevel_resample_fft_parallel", (DL_FUNC) &_waterlevel_resample_fft_parallel, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_waterlevel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
